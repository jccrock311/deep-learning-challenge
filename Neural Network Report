# Report on Module 21 Assignment - Neural Network Model  

## Overview
- The nonprofit foundation Alphabet Soup wants a tool that can help it select the applicants for funding with the best chance of success in their ventures. 
- Using the features in the provided dataset, I created a binary classifier that can predict whether applicants will be successful if funded by Alphabet Soup.
- The CSV I recieved from Alphabet Soup contains more than 34,000 organizations that have received funding from them over the years.
- Within this dataset, there are 11 columns and 34299 rows that capture metadata about each organization
- Here's what the dataset looks like:
<img src="./Images/application_df.png" alt="df" width="300"/>
- For the Neural Network Model, I utilized `Sequential` from `Keras` and my goal was to achieve the highest accuracy possible, which was achieved using a tuner.

## Results  
- Data Preprocessing
    - What variable(s) are the target(s) for your model?
        - The targeted variable was `IS_SUCCESSFUL` from the neural network model.
    - What variable(s) are the features of your model?
        - The dataset contained the following features:  
        - `EIN` and `NAME`—Identification columns  
        - `APPLICATION_TYPE`—Alphabet Soup application type  
        - `AFFILIATION`—Affiliated sector of industry  
        - `CLASSIFICATION`—Government organization classification  
        - `USE_CASE`—Use case for funding  
        - `ORGANIZATION`—Organization type  
        - `STATUS`—Active status INCOME_AMT—Income classification  
        - `SPECIAL_CONSIDERATIONS`—Special considerations for application  
        - `ASK_AMT`—Funding amount requested  
        - `IS_SUCCESSFUL`—Was the money used effectively  
    - What variable(s) should be removed from the input data because they are neither targets nor features?  
        - `EIN` and `NAME` since they were unnecessary for what I was trying to accomplish, as they are used more for identification.
- Compiling, Training, and Evaluating the Model
    - How many neurons, layers, and activation functions did you select for your neural network model, and why? 
        - There are five hidden node layers with 80 inputs/neurons in the first layer, 60 in the second, 40 ... , 20 ... , and 5 in the fifth.
        - The neural network model contains 5 hidden layers and an output layer each with the activation function, "sigmoid".
    - Were you able to achieve the target model performance?  
        - No. The original model's performance fell short of the 75% target goal. The accuracy recorded was 73% with a loss of 55%.
    - What steps did you take in your attempts to increase model performance?  
        - I utilized a function, trying to optimize the model through "kerastuner" (hyperparameters). This was to pick the most efficient activation rate, number of neurons, and number of total layers. 

## Summary   
- For this challenge, I attempted developing a deep learning neural network model for Alphabet Soup, enabling them to select applicants for funding with the best chance of success in their business ventures.
    - I started by pre-processing the data. I dropped two columns that adhered to identification only, binned and dummified columns, and scaled both the training and testing datasets.
    - I utilized a hyperparameter tuner to help read the accuracy/loss per model.
    - After this, I optimized my model three times, changing the activation functions and number of neurons/layers.
<img src="./Images/Loss_Accuracy.png" alt="comparision" width="300"/>  

- Utilizing a functional API could potentially increase accuracy, as well as solve the classification issues. 
    - Functional APIs are utiliized to build (and have built-in) layers, creating models that are often more flexible than those of Sequential models.
    - This makes it much easier to specify inputs/outputs in all available layers.
